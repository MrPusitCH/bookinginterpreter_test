[1mdiff --cc app/api/booking-data/post-booking-data/[id]/route.ts[m
[1mindex 5b2c824,81ca936..0000000[m
[1m--- a/app/api/booking-data/post-booking-data/[id]/route.ts[m
[1m+++ b/app/api/booking-data/post-booking-data/[id]/route.ts[m
[36m@@@ -1082,95 -859,71 +859,71 @@@[m [mimport type { RunResult } from "@/types[m
              autoAssignmentResult = await run(result.body.data.bookingId);[m
              console.log(`üìä Auto-assignment result:`, autoAssignmentResult);[m
            }[m
[31m-         }[m
[31m- [m
[31m-         // Update the response with auto-assignment result[m
[31m-         if (result.body.data) {[m
[31m-           result.body.data.autoAssignment = autoAssignmentResult;[m
[31m-         }[m
[31m-       } catch (error) {[m
[31m-         console.error("‚ùå Auto-assignment failed:", error);[m
[31m-         if (result.body.data) {[m
[31m-           result.body.data.autoAssignment = {[m
[31m-             status: "escalated",[m
[31m-             reason: "auto-assignment error",[m
[31m-           };[m
[32m+           [m
[32m+           // Update the response with auto-assignment result[m
[32m+           result.body.data.autoAssignment = autoAssignmentResult as RunResult | null;[m
[32m+         } catch (error) {[m
[32m+           console.error("‚ùå Auto-assignment failed:", error);[m
[32m+           result.body.data.autoAssignment = { status: "escalated", reason: "auto-assignment error" };[m
          }[m
        }[m
[31m-     }[m
  [m
[31m-     return NextResponse.json<ApiResponse>(result.body as ApiResponse, {[m
[31m-       status: result.status,[m
[31m-     });[m
[31m-   } catch (error) {[m
[31m-     console.error("Error creating booking:", error);[m
[31m-     return NextResponse.json([m
[31m-       {[m
[31m-         success: false,[m
[31m-         error: "Internal server error",[m
[31m-         message: "An unexpected error occurred while creating the booking",[m
[31m-       },[m
[31m-       { status: 500 }[m
[31m-     );[m
[32m+       return NextResponse.json<ApiResponse>(result.body as ApiResponse, {[m
[32m+         status: result.status,[m
[32m+       });[m
[32m+     } catch (error) {[m
[32m+       console.error("Error creating booking:", error);[m
[32m+       return NextResponse.json([m
[32m+         {[m
[32m+           success: false,[m
[32m+           error: "Internal server error",[m
[32m+           message: "An unexpected error occurred while creating the booking",[m
[32m+         },[m
[32m+         { status: 500 }[m
[32m+       );[m
[32m+     } finally {[m
[32m+       await prisma.$disconnect();[m
[32m+     }[m
    }[m
[31m- }[m
  [m
[31m- // Optional: Add a GET method to retrieve bookings[m
[31m- export async function GET(request: NextRequest) {[m
[31m-   try {[m
[31m-     const { searchParams } = new URL(request.url);[m
[31m-     const limit = parseInt(searchParams.get("limit") || "10");[m
[31m-     const offset = parseInt(searchParams.get("offset") || "0");[m
[31m-     const meetingRoom = searchParams.get("meetingRoom");[m
[32m+   // Optional: Add a GET method to retrieve bookings[m
[32m+   export async function GET(request: NextRequest) {[m
[32m+     try {[m
[32m+       const { searchParams } = new URL(request.url);[m
[32m+       const limit = parseInt(searchParams.get("limit") || "10");[m
[32m+       const offset = parseInt(searchParams.get("offset") || "0");[m
[32m+       const meetingRoom = searchParams.get("meetingRoom");[m
[32m+ [m
[32m+       const where: Record<string, unknown> = {};[m
[32m+       if (meetingRoom) where.meetingRoom = meetingRoom;[m
[32m+ [m
[32m+       const bookings = await prisma.bookingPlan.findMany({[m
[32m+         where,[m
[32m+         orderBy: { timeStart: "asc" },[m
[32m+         take: limit,[m
[32m+         skip: offset,[m
[32m+       });[m
  [m
[31m-     const where: Record<string, unknown> = {};[m
[31m-     if (meetingRoom) {[m
[31m-       // Find room by name and filter by roomId[m
[31m-       const room = await prisma.room.findFirst({[m
[31m-         where: { name: meetingRoom },[m
[31m-         select: { id: true },[m
[32m+       return NextResponse.json({[m
[32m+         success: true,[m
[32m+         data: bookings,[m
[32m+         pagination: {[m
[32m+           limit,[m
[32m+           offset,[m
[32m+           total: await prisma.bookingPlan.count({ where }),[m
[32m+         },[m
        });[m
[31m-       if (room) {[m
[31m-         where.roomId = room.id;[m
[31m-       } else {[m
[31m-         // If room not found, return empty results[m
[31m-         return NextResponse.json({[m
[31m-           success: true,[m
[31m-           data: [],[m
[31m-           pagination: {[m
[31m-             limit,[m
[31m-             offset,[m
[31m-             total: 0,[m
[31m-           },[m
[31m-         });[m
[31m-       }[m
[32m+     } catch (error) {[m
[32m+       console.error("Error fetching bookings:", error);[m
[32m+       return NextResponse.json([m
[32m+         {[m
[32m+           success: false,[m
[32m+           error: "Internal server error",[m
[32m+           message: "An unexpected error occurred while fetching bookings",[m
[32m+         },[m
[32m+         { status: 500 }[m
[32m+       );[m
[32m+     } finally {[m
[32m+       await prisma.$disconnect();[m
      }[m
[31m- [m
[31m-     const bookings = await prisma.bookingPlan.findMany({[m
[31m-       where,[m
[31m-       orderBy: { timeStart: "asc" },[m
[31m-       take: limit,[m
[31m-       skip: offset,[m
[31m-     });[m
[31m- [m
[31m-     return NextResponse.json({[m
[31m-       success: true,[m
[31m-       data: bookings,[m
[31m-       pagination: {[m
[31m-         limit,[m
[31m-         offset,[m
[31m-         total: await prisma.bookingPlan.count({ where }),[m
[31m-       },[m
[31m-     });[m
[31m-   } catch (error) {[m
[31m-     console.error("Error fetching bookings:", error);[m
[31m-     return NextResponse.json([m
[31m-       {[m
[31m-         success: false,[m
[31m-         error: "Internal server error",[m
[31m-         message: "An unexpected error occurred while fetching bookings",[m
[31m-       },[m
[31m-       { status: 500 }[m
[31m-     );[m
[31m--  }[m
[31m- }[m
[32m++  }[m
