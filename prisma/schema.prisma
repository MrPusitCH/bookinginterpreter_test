generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model BookingPlan {
  bookingId                Int               @id @default(autoincrement()) @map("BOOKING_ID")
  ownerGroup               OwnerGroup        @map("OWNER_GROUP")
  meetingRoom              String            @map("MEETING_ROOM") @db.VarChar(50)
  meetingDetail            String?           @map("MEETING_DETAIL") @db.Text
  timeStart                DateTime          @map("TIME_START") @db.DateTime(0)
  timeEnd                  DateTime          @map("TIME_END") @db.DateTime(0)
  bookingStatus            BookingStatus     @default(waiting) @map("BOOKING_STATUS")
  createdAt                DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  drType                   DRType?           @map("DR_TYPE")
  otherType                String?           @map("OTHER_TYPE") @db.VarChar(255)
  otherTypeScope           OtherTypeScope?   @map("OTHER_TYPE_SCOPE")
  applicableModel          String?           @map("APPLICABLE_MODEL") @db.VarChar(255)
  interpreterEmpCode       String?           @map("INTERPRETER_EMP_CODE") @db.VarChar(64)
  isRecurring              Boolean           @default(false) @map("IS_RECURRING")
  meetingType              MeetingType       @map("MEETING_TYPE")
  ownerEmpCode             String            @map("OWNER_EMP_CODE") @db.VarChar(64)
  parentBookingId          Int?              @map("PARENT_BOOKING_ID")
  recurrenceEndDate        DateTime?         @map("RECURRENCE_END_DATE") @db.DateTime(0)
  recurrenceEndOccurrences Int?              @map("RECURRENCE_END_OCCURRENCES")
  recurrenceEndType        EndType?          @map("RECURRENCE_END_TYPE")
  recurrenceInterval       Int?              @map("RECURRENCE_INTERVAL")
  recurrenceMonthday       Int?              @map("RECURRENCE_MONTHDAY")
  recurrenceType           RecurrenceType?   @map("RECURRENCE_TYPE")
  recurrenceWeekdays       String?           @map("RECURRENCE_WEEKDAYS") @db.VarChar(32)
  recurrenceWeekOrder      WeekOrder?        @map("RECURRENCE_WEEK_ORDER")
  assignmentLogs           AssignmentLog[]
  interpreterEmployee      Employee?         @relation("InterpreterEmployee", fields: [interpreterEmpCode], references: [empCode])
  employee                 Employee          @relation("OwnerEmployee", fields: [ownerEmpCode], references: [empCode])
  parentBooking            BookingPlan?      @relation("RecurringBookings", fields: [parentBookingId], references: [bookingId])
  recurringBookings        BookingPlan[]     @relation("RecurringBookings")
  inviteEmails             InviteEmailList[]

  // NEW: room relation
  roomId                   Int?              @map("ROOM_ID")
  room                     Room?             @relation(fields: [roomId], references: [id])

  @@index([ownerEmpCode])
  @@index([interpreterEmpCode])
  @@index([roomId])
  @@index([parentBookingId])
  @@index([drType])
  @@index([otherTypeScope])
  @@map("BOOKING_PLAN")
}

model Room {
  id        Int               @id @default(autoincrement()) @map("ID")
  name      String            @unique @map("NAME") @db.VarChar(100)
  location  String?           @map("LOCATION") @db.VarChar(255)
  capacity  Int               @default(1) @map("CAPACITY")
  isActive  Boolean           @default(true) @map("IS_ACTIVE")
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime          @updatedAt @map("updated_at") @db.Timestamp(0)

  // Back relation from bookings
  bookings  BookingPlan[]

  @@map("ROOM")
}

model InviteEmailList {
  emailListId Int         @id @default(autoincrement()) @map("EMAIL_LIST_ID")
  bookingId   Int         @map("BOOKING_ID")
  email       String      @map("EMAIL") @db.VarChar(255)
  invitedAt   DateTime    @default(now()) @map("invited_at") @db.Timestamp(0)
  bookingPlan BookingPlan @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
  @@unique([bookingId, email], name: "unique_booking_email")
  @@map("INVITE_EMAIL_LIST")
}

model Employee {
  id                    Int             @id @default(autoincrement()) @map("ID")
  empCode               String          @unique @map("EMP_CODE") @db.VarChar(64)
  prefixEn              String?         @map("PREFIX_EN") @db.VarChar(32)
  firstNameEn           String?         @map("FIRST_NAME_EN") @db.VarChar(255)
  lastNameEn            String?         @map("LAST_NAME_EN") @db.VarChar(255)
  prefixTh              String?         @map("PREFIX_TH") @db.VarChar(32)
  firstNameTh           String?         @map("FIRST_NAME_TH") @db.VarChar(255)
  lastNameTh            String?         @map("LAST_NAME_TH") @db.VarChar(255)
  fno                   String?         @map("FNO") @db.VarChar(64)
  deptPath              String?         @map("DEPT_PATH") @db.VarChar(512)
  positionTitle         String?         @map("POSITION_TITLE") @db.VarChar(255)
  email                 String?         @map("EMAIL") @db.VarChar(255)
  telExt                String?         @map("TEL_EXT") @db.VarChar(64)
  isActive              Boolean         @default(true) @map("IS_ACTIVE")
  lastLoginAt           DateTime?       @map("LAST_LOGIN_AT")
  syncedAt              DateTime?       @map("SYNCED_AT")
  createdAt             DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt             DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  assignmentLogs        AssignmentLog[] @relation("AssignmentLogInterpreter")
  bookingsAsInterpreter BookingPlan[]   @relation("InterpreterEmployee")
  bookingsOwned         BookingPlan[]   @relation("OwnerEmployee")
  userRoles             UserRole[]

  @@map("EMPLOYEE")
}

model UserRole {
  userId   Int      @map("USER_ID")
  roleCode RoleCode @map("ROLE_CODE")
  employee Employee @relation(fields: [userId], references: [id])

  @@id([userId, roleCode])
  @@map("USER_ROLE")
}

model AutoAssignmentConfig {
  id                   Int      @id @default(autoincrement()) @map("ID")
  autoAssignEnabled    Boolean  @default(true) @map("AUTO_ASSIGN_ENABLED")
  mode                 String   @default("NORMAL") @map("MODE")
  fairnessWindowDays   Int      @default(30) @map("FAIRNESS_WINDOW_DAYS")
  maxGapHours          Int      @default(10) @map("MAX_GAP_HOURS")
  MIN_ADVANCE_DAYS     Int      @default(2)
  w_fair               Float    @default(1.2) @map("W_FAIR")
  w_urgency            Float    @default(0.5) @map("W_URGENCY")
  w_lrs                Float    @default(0.3) @map("W_LRS")
  drConsecutivePenalty Float    @default(-0.7) @map("DR_CONSECUTIVE_PENALTY")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("AUTO_ASSIGNMENT_CONFIG")
}

model MeetingTypePriority {
  id                   Int         @id @default(autoincrement()) @map("ID")
  meetingType          MeetingType @unique @map("MEETING_TYPE")
  priorityValue        Int         @map("PRIORITY_VALUE")
  urgentThresholdDays  Int         @map("URGENT_THRESHOLD_DAYS")
  generalThresholdDays Int         @map("GENERAL_THRESHOLD_DAYS")
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime    @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("MEETING_TYPE_PRIORITY")
}

model MeetingTypeModeThreshold {
  id                   Int         @id @default(autoincrement()) @map("ID")
  meetingType          MeetingType @map("MEETING_TYPE")
  assignmentMode       String      @map("ASSIGNMENT_MODE") @db.VarChar(20)
  urgentThresholdDays  Int         @map("URGENT_THRESHOLD_DAYS")
  generalThresholdDays Int         @map("GENERAL_THRESHOLD_DAYS")
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime    @updatedAt @map("updated_at") @db.Timestamp(0)

  @@unique([meetingType, assignmentMode])
  @@map("MEETING_TYPE_MODE_THRESHOLD")
}

model AssignmentLog {
  id                  Int         @id @default(autoincrement()) @map("ID")
  bookingId           Int         @map("BOOKING_ID")
  interpreterEmpCode  String?     @map("INTERPRETER_EMP_CODE") @db.VarChar(64)
  status              String      @map("STATUS") @db.VarChar(32)
  reason              String?     @map("REASON") @db.Text
  preHoursSnapshot    Json        @map("PRE_HOURS_SNAPSHOT")
  postHoursSnapshot   Json?       @map("POST_HOURS_SNAPSHOT")
  scoreBreakdown      Json?       @map("SCORE_BREAKDOWN")
  maxGapHours         Int         @map("MAX_GAP_HOURS")
  fairnessWindowDays  Int         @map("FAIRNESS_WINDOW_DAYS")
  conflictDetection   Json?       @map("CONFLICT_DETECTION")
  drPolicyDecision    Json?       @map("DR_POLICY_DECISION")
  performance         Json?       @map("PERFORMANCE")
  systemState         Json?       @map("SYSTEM_STATE")
  createdAt           DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  bookingPlan         BookingPlan @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
  interpreterEmployee Employee?   @relation("AssignmentLogInterpreter", fields: [interpreterEmpCode], references: [empCode])

  @@index([bookingId])
  @@index([interpreterEmpCode])
  @@index([status])
  @@map("ASSIGNMENT_LOG")
}

model ConflictDetectionLog {
  id                       Int      @id @default(autoincrement()) @map("ID")
  timestamp                DateTime @map("TIMESTAMP") @db.DateTime(0)
  bookingId                Int      @map("BOOKING_ID")
  requestedTimeStart       DateTime @map("REQUESTED_TIME_START") @db.DateTime(0)
  requestedTimeEnd         DateTime @map("REQUESTED_TIME_END") @db.DateTime(0)
  totalInterpretersChecked Int      @map("TOTAL_INTERPRETERS_CHECKED")
  availableInterpreters    Int      @map("AVAILABLE_INTERPRETERS")
  conflictedInterpreters   Int      @map("CONFLICTED_INTERPRETERS")
  conflicts                Json     @map("CONFLICTS")
  processingTimeMs         Int      @map("PROCESSING_TIME_MS")
  resolutionStrategy       String   @map("RESOLUTION_STRATEGY") @db.VarChar(64)
  outcome                  String   @map("OUTCOME") @db.VarChar(32)
  createdAt                DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([bookingId])
  @@index([timestamp])
  @@index([outcome])
  @@map("CONFLICT_DETECTION_LOG")
}

model DRPolicyLog {
  id                      Int      @id @default(autoincrement()) @map("ID")
  timestamp               DateTime @map("TIMESTAMP") @db.DateTime(0)
  bookingId               Int      @map("BOOKING_ID")
  interpreterId           String   @map("INTERPRETER_ID") @db.VarChar(64)
  isDRMeeting             Boolean  @map("IS_DR_MEETING")
  drType                  String?  @map("DR_TYPE") @db.VarChar(64)
  mode                    String   @map("MODE") @db.VarChar(32)
  policyApplied           Json     @map("POLICY_APPLIED")
  lastGlobalDR            Json?    @map("LAST_GLOBAL_DR")
  drHistory               Json     @map("DR_HISTORY")
  alternativeInterpreters Int      @map("ALTERNATIVE_INTERPRETERS")
  finalDecision           String   @map("FINAL_DECISION") @db.VarChar(32)
  decisionRationale       String   @map("DECISION_RATIONALE") @db.Text
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([bookingId])
  @@index([interpreterId])
  @@index([timestamp])
  @@index([finalDecision])
  @@map("DR_POLICY_LOG")
}

model SystemErrorLog {
  id           Int      @id @default(autoincrement()) @map("ID")
  timestamp    DateTime @map("TIMESTAMP") @db.DateTime(0)
  operation    String   @map("OPERATION") @db.VarChar(128)
  bookingId    Int?     @map("BOOKING_ID")
  errorName    String   @map("ERROR_NAME") @db.VarChar(128)
  errorMessage String   @map("ERROR_MESSAGE") @db.Text
  errorStack   String?  @map("ERROR_STACK") @db.Text
  context      Json?    @map("CONTEXT")
  systemState  Json?    @map("SYSTEM_STATE")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([timestamp])
  @@index([operation])
  @@index([bookingId])
  @@index([errorName])
  @@map("SYSTEM_ERROR_LOG")
}

enum DRType {
  PR_PR @map("PR-PR")
  DR_k  @map("DR-k")
  DR_II @map("DR-II")
  DR_I  @map("DR-I")
  Other @map("Other")

  @@map("dr_type")
}

enum OtherTypeScope {
  meeting_type
  dr_type

  @@map("other_type_scope")
}

enum OwnerGroup {
  iot
  hardware
  software
  other
  @@map("owner_group")
}

enum MeetingType {
  DR
  VIP
  Weekly
  General
  Augent
  Other
}

enum BookingStatus {
  approve
  cancel
  waiting
  complet

  @@map("booking_status")
}

enum RecurrenceType {
  daily
  weekly
  biweekly
  monthly
  custom
}

enum EndType {
  never
  on_date
  after_occurrences
}

enum WeekOrder {
  first
  second
  third
  fourth
  last
}

enum RoleCode {
  ADMIN
  INTERPRETER
}
