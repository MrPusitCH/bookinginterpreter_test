-- Safe migration to add ROOM table, INCLUDE_INTERPRETER, and replace MEETING_ROOM with ROOM_ID
-- Tested for MySQL/MariaDB. Run inside a transaction if your environment supports it.

-- 1) Create ROOM table (id, name, location, isActive, capacity, created_at, updated_at)
CREATE TABLE IF NOT EXISTS `ROOM` (
  `ROOM_ID` INT NOT NULL AUTO_INCREMENT,
  `ROOM_NAME` VARCHAR(100) NOT NULL,
  `LOCATION` VARCHAR(255) NULL,
  `IS_ACTIVE` TINYINT(1) NOT NULL DEFAULT 1,
  `CAPACITY` INT NOT NULL DEFAULT 1,
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`ROOM_ID`),
  UNIQUE KEY `UK_ROOM_NAME` (`ROOM_NAME`)
) ENGINE=InnoDB;

-- 2) Backfill ROOM rows from distinct MEETING_ROOM values in BOOKING_PLAN
INSERT INTO `ROOM` (`ROOM_NAME`, `LOCATION`, `IS_ACTIVE`, `CAPACITY`) 
SELECT DISTINCT 
  TRIM(`MEETING_ROOM`) AS ROOM_NAME,
  NULL AS LOCATION,
  1 AS IS_ACTIVE,
  1 AS CAPACITY
FROM `BOOKING_PLAN`
WHERE `MEETING_ROOM` IS NOT NULL AND LENGTH(TRIM(`MEETING_ROOM`)) > 0
ON DUPLICATE KEY UPDATE `ROOM_NAME` = VALUES(`ROOM_NAME`);

-- 3) Add INCLUDE_INTERPRETER to BOOKING_PLAN (default true)
ALTER TABLE `BOOKING_PLAN`
  ADD COLUMN `INCLUDE_INTERPRETER` TINYINT(1) NOT NULL DEFAULT 1 AFTER `updated_at`;

-- 4) Add ROOM_ID (nullable), populate it by joining ROOM, then make it NOT NULL
ALTER TABLE `BOOKING_PLAN`
  ADD COLUMN `ROOM_ID` INT NULL AFTER `OWNER_GROUP`;

UPDATE `BOOKING_PLAN` bp
JOIN `ROOM` r ON r.`ROOM_NAME` = bp.`MEETING_ROOM`
SET bp.`ROOM_ID` = r.`ROOM_ID`
WHERE bp.`ROOM_ID` IS NULL;

-- For any rows that failed to map (NULL ROOM_ID), create a placeholder room using the MEETING_ROOM string
INSERT INTO `ROOM` (`ROOM_NAME`, `IS_ACTIVE`, `CAPACITY`)
SELECT DISTINCT TRIM(bp.`MEETING_ROOM`), 1, 1
FROM `BOOKING_PLAN` bp
LEFT JOIN `ROOM` r ON r.`ROOM_ID` = bp.`ROOM_ID`
WHERE bp.`ROOM_ID` IS NULL AND bp.`MEETING_ROOM` IS NOT NULL AND LENGTH(TRIM(bp.`MEETING_ROOM`)) > 0
ON DUPLICATE KEY UPDATE `ROOM_NAME` = VALUES(`ROOM_NAME`);

-- Try to map again after creating placeholders
UPDATE `BOOKING_PLAN` bp
JOIN `ROOM` r ON r.`ROOM_NAME` = bp.`MEETING_ROOM`
SET bp.`ROOM_ID` = r.`ROOM_ID`
WHERE bp.`ROOM_ID` IS NULL;

-- Finally set ROOM_ID NOT NULL and add FK + index
ALTER TABLE `BOOKING_PLAN`
  MODIFY `ROOM_ID` INT NOT NULL,
  ADD INDEX `IDX_BOOKING_PLAN_ROOM_ID` (`ROOM_ID`),
  ADD CONSTRAINT `FK_BOOKING_PLAN_ROOM`
    FOREIGN KEY (`ROOM_ID`) REFERENCES `ROOM`(`ROOM_ID`)
    ON UPDATE CASCADE ON DELETE RESTRICT;

-- 5) Drop legacy MEETING_ROOM column
ALTER TABLE `BOOKING_PLAN`
  DROP COLUMN `MEETING_ROOM`;

-- Done.

